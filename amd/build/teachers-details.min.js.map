{"version":3,"file":"teachers-details.min.js","sources":["../src/teachers-details.js"],"sourcesContent":["import Widget from 'lytix_helper/widget';\nimport Templates from 'core/templates';\nimport {getDaysPerMonth} from 'lytix_helper/date_helper';\nimport PercentRounder from 'lytix_helper/percent_rounder';\n\nconst WIDGET_ID = 'grademonitor';\n\nexport const init = (contextid, userid, courseid, locale) => {\n    locale = Widget.convertLocale(locale);\n    // The number of values: (weeks + 1) * 3.\n    // This will be assigned a value that is only available in the scope of the first promise.\n    // To make it accessible down the promise chain we declare it in an outer scope.\n    let valueCount = 0;\n\n    // The promise returned by ‘getData’ is only a fake promise (made by jQuery): It does not have ‘finally(…)’.\n    // By wrapping it in a native promise we can work around this issue.\n    Promise.resolve(Widget.getData(\n        'local_lytix_lytix_grademonitor_grademonitor_get_history',\n        {contextid: contextid, courseid: courseid}\n    ))\n    .then(data => {\n        const counts = data.Count;\n        valueCount = counts.length;\n        const\n            studentCount = data.Total,\n            weekCount = Math.round(valueCount / 3), // This is actually the number of weeks plus one (today’s values).\n            context = {\n                counts: Array(weekCount),\n                labels: Array(weekCount).fill(true),\n                percentages: Array(weekCount),\n                weeks: Array(weekCount - 1), // Calendar weeks according to ISO 8601.\n                valueCount: valueCount - 3, // Exclude today’s values.\n            };\n\n        // First, we extract and calculate all values, later we cut off today’s data.\n\n        // Returns the sum of all entries of an erray.\n        const sumArray = array => {\n            let sum = 0;\n            for (let i = array.length - 1; i >= 0; --i) {\n                sum += array[i];\n            }\n            return sum;\n        };\n\n        const rounder = new PercentRounder();\n        // Populate segments (percent, count, grade), calculate goal percentage.\n        for (let dataColumIndex = 0, percentIndex = 0; dataColumIndex < valueCount; ++dataColumIndex) {\n            const\n                currentCounts = counts[dataColumIndex],\n                currentCountsLength = currentCounts.length;\n            let countSum; // Declare here so we can calculate and check it only when needed.\n\n            if (currentCountsLength > 0 && (countSum = sumArray(currentCounts)) > 0) {\n                const segments = context.counts[dataColumIndex] = [];\n                let gradeIndex = currentCountsLength - 1;\n                // We use a do-while loop to skip the redundant first conditional of a for loop,\n                // because we already know that it will run at least once, due to the length check.\n                do {\n                    const currentGradeCount = currentCounts[gradeIndex];\n                    if (currentGradeCount > 0) {\n                        segments.push({\n                            count: currentGradeCount,\n                            percent: rounder.round(currentGradeCount / countSum * 100),\n                            grade: gradeIndex + 1,\n                        });\n                    }\n                } while (--gradeIndex >= 0);\n\n                // If we are at a Goal segment, we calculate the percentage; otherwise we retrieve it and increment the index.\n                context.percentages[dataColumIndex] = Math.round(dataColumIndex % 3 == 0 ?\n                    countSum / studentCount * 100 : data.Percentage[percentIndex++]);\n            } else {\n                context.counts[dataColumIndex] = false; // Has to be something falsy.\n                context.percentages[dataColumIndex] = false;\n                if (dataColumIndex % 3) {\n                   percentIndex++;\n                }\n            }\n            rounder.reset();\n        }\n\n        // The algorithm for calculating the week number has been provided by:\n        // https://stackoverflow.com/a/6117889\n\n        const startDate = new Date(data.Start * 1000);\n        // Set date to closest Thursday (the week with the first Thursday of the year is CW 1).\n        startDate.setUTCDate(startDate.getUTCDate() + 4 - (startDate.getUTCDay() || 7));\n        const\n            // First day of the year we start in.\n            yearStart = new Date(Date.UTC(startDate.getUTCFullYear(), 0, 1)),\n            getCalendarWeek = () => Math.ceil((((startDate - yearStart) / 86400000) + 1) / 7);\n\n        for (let i = 0, calendarWeek = getCalendarWeek(), dstIndex = weekCount; i < weekCount; ++i) {\n            // A year has either 52 or 53 weeks. If we reach that limit, we re-calculate.\n            if (calendarWeek > 52) {\n                startDate.setUTCDate(startDate.getUTCDate() + i * 7);\n                yearStart.setUTCFullYear(yearStart.getUTCFullYear() + 1);\n                calendarWeek = getCalendarWeek();\n            }\n            context.weeks[--dstIndex] = calendarWeek++;\n        }\n\n        // Get name and width of months.\n\n        // Reset start.\n        startDate.setTime(data.Start * 1000);\n        // Set to Monday of its week.\n        startDate.setDate(startDate.getDate() + 1 - (startDate.getDay() || 7));\n\n        const endDate = new Date(startDate.getTime());\n        // Set to Sunday (+6) of last week.\n        // We subtract 2 from weekCount to exclude today and the current (first) week.\n        endDate.setDate(endDate.getDate() + 6 + (weekCount - 2) * 7);\n\n        const\n            {daysPerMonth, monthNames} = getDaysPerMonth(startDate, endDate, new Intl.DateTimeFormat(locale, {month: 'short'})),\n            dayCount = sumArray(daysPerMonth),\n            monthCount = monthNames.length,\n            months = context.months = new Array(monthCount);\n\n        for (let i = 0, dstIndex = monthCount; i < monthCount; ++i) {\n            months[--dstIndex] = {\n                width: rounder.round(daysPerMonth[i] / dayCount * 100),\n                month: monthNames[i],\n            };\n        }\n\n        return Templates.render('lytix_grademonitor/teachers-details', context);\n    })\n    .then(html => {\n        const container = Widget.getContentContainer(WIDGET_ID);\n        container.insertAdjacentHTML('beforeend', html);\n\n        // Make overflowing segment labels invisible.\n        const segments = container.querySelectorAll('.grade-segment');\n        for (let i = segments.length - 1; i >= 0; --i) {\n            const segment = segments[i];\n            // Check for vertical overflow.\n                if (segment.scrollHeight > segment.clientHeight) {\n                    // Make label invisible.\n                        segment.style.color = 'transparent';\n                }\n        }\n\n        return;\n    })\n    .finally(() => {\n        document.getElementById(WIDGET_ID).classList.remove('loading');\n    })\n    .catch(error => {\n        Widget.handleError(error, WIDGET_ID);\n    });\n};\n"],"names":["contextid","userid","courseid","locale","Widget","convertLocale","valueCount","Promise","resolve","getData","then","data","counts","Count","length","studentCount","Total","weekCount","Math","round","context","Array","labels","fill","percentages","weeks","sumArray","array","sum","i","rounder","PercentRounder","dataColumIndex","percentIndex","currentCounts","currentCountsLength","countSum","segments","gradeIndex","currentGradeCount","push","count","percent","grade","Percentage","reset","startDate","Date","Start","setUTCDate","getUTCDate","getUTCDay","yearStart","UTC","getUTCFullYear","getCalendarWeek","ceil","calendarWeek","dstIndex","setUTCFullYear","setTime","setDate","getDate","getDay","endDate","getTime","Intl","DateTimeFormat","month","daysPerMonth","monthNames","dayCount","monthCount","months","width","Templates","render","html","container","getContentContainer","insertAdjacentHTML","querySelectorAll","segment","scrollHeight","clientHeight","style","color","finally","document","getElementById","classList","remove","catch","error","handleError"],"mappings":"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"}