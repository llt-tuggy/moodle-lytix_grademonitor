define("lytix_grademonitor/grademonitor",["exports","lytix_helper/widget","core/templates","lytix_helper/percent_rounder","lytix_logs/logs","core/config"],(function(_exports,_widget,_templates,_percent_rounder,_logs,_config){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_widget=_interopRequireDefault(_widget),_templates=_interopRequireDefault(_templates),_percent_rounder=_interopRequireDefault(_percent_rounder);_exports.init=(contextid,userid,courseid,locale)=>{const dataPromise=_widget.default.getData("local_lytix_lytix_grademonitor_grademonitor_get",{contextid:contextid,courseid:courseid}),stringsPromise=_widget.default.getStrings({lytix_grademonitor:{differing:{empty:"goal_empty",likely:"goal_likely",unlikely:"goal_unlikely",unachievable:"goal_unachievable",fail:"goal_fail",schemeUpdate:"scheme_updated"},identical:["points"]}});locale=_widget.default.convertLocale(locale),Promise.all([stringsPromise,dataPromise]).then((values=>{var _optionalsIterator,_checkedIterator,_optionalsIterator3,_checkedIterator3;const strings=values[0],data=values[1],items=data.Items,itemIDs=items.IDs,itemCount=itemIDs.length,itemNames=items.Names,maxScores=items.MaxScores,scores=null==items?void 0:items.Scores,averages=null==items?void 0:items.ClassAvgs,estimations=null==items?void 0:items.Estimations,optionalIndexes=null==items?void 0:items.OptionalIndexes,checkedIndexes=null==items?void 0:items.CheckedIndexes;let totalPoints=0,totalMandatoryPoints=0;{const optionalsIterator=null==optionalIndexes?void 0:optionalIndexes.values();let optionalIndex=null==optionalsIterator?void 0:optionalsIterator.next().value;for(let i=0;i<itemCount;++i)totalPoints+=maxScores[i],i!=optionalIndex?totalMandatoryPoints+=maxScores[i]:optionalIndex=null==optionalsIterator?void 0:optionalsIterator.next().value}const view={table:new Array(itemCount),showAverage:data.ShowAverage,gradeCompletion:0,currentGrade:0,selfEstimation:0,average:0,goalSelection:[{grade:1},{grade:2},{grade:3},{grade:4}]};data.Goal&&(view.goalSelection[data.Goal-1].selected=!0),data.LastSchemeUpdate&&(view.schemeNotification=strings.schemeUpdate+new Date(1e3*data.LastSchemeUpdate).toLocaleDateString(locale));const scheme=data.Scheme,gradeFromPercent=percent=>{if(percent>=scheme[3])return 1;let i=0;for(;percent>=scheme[i];)++i;return 5-i},gradeFromScore=(score,maxScore)=>gradeFromPercent(score/maxScore*100),format=new Intl.NumberFormat(locale,{maximumFractionDigits:1}).format,weightRounder=new _percent_rounder.default;let optionalsIterator=null==optionalIndexes?void 0:optionalIndexes.values(),checkedIterator=null==checkedIndexes?void 0:checkedIndexes.values(),optionalIndex=null===(_optionalsIterator=optionalsIterator)||void 0===_optionalsIterator?void 0:_optionalsIterator.next().value,checkedIndex=null===(_checkedIterator=checkedIterator)||void 0===_checkedIterator?void 0:_checkedIterator.next().value;for(let i=0;i<itemCount;++i){const maxScore=maxScores[i],score=null==scores?void 0:scores[i],average=null==averages?void 0:averages[i],estimation=null==estimations?void 0:estimations[i],assessed=void 0!==score&&score>=0,weight=maxScore/totalMandatoryPoints*100,optional=i===optionalIndex,checked=i===checkedIndex,item=view.table[i]={itemName:itemNames[i],index:i,assessed:assessed,checked:assessed||checked,optional:optional,value:0};var _checkedIterator2,_optionalsIterator2;if(checked)checkedIndex=null===(_checkedIterator2=checkedIterator)||void 0===_checkedIterator2?void 0:_checkedIterator2.next().value;if(void 0!==average&&average>=0&&(item.average=optional?format(average)+strings.points:format(gradeFromScore(average,maxScore))),optional)optionalIndex=null===(_optionalsIterator2=optionalsIterator)||void 0===_optionalsIterator2?void 0:_optionalsIterator2.next().value,item.weight=Math.round(weight),void 0!==estimation&&estimation>=0&&(item.estimation=format(maxScore/100*estimation),item.value=estimation),assessed&&(item.result=format(score),item.value=score/maxScore*100);else if(item.weight=weightRounder.round(weight),item.estimation=void 0!==estimation&&estimation>=0&&gradeFromPercent(estimation),assessed){view.gradeCompletion+=weight;const percent=item.value=score/maxScore*100;item.result=format(gradeFromPercent(percent))}else void 0!==estimation&&estimation>=0&&(item.value=estimation,item.estimation=gradeFromPercent(estimation))}view.gradeCompletion=format(view.gradeCompletion);const accumulatedMax={score:0,estimate:0,average:0};let accumulatedScore=0,accumulatedOptionalScore=0,accumulatedAverage=0,accumulatedEstimation=0,accumulatedOptionalEstimation=0,remainingPoints=totalPoints,remainingMandatoryPoints=totalMandatoryPoints;const indexToEstimate={};optionalsIterator=null==optionalIndexes?void 0:optionalIndexes.values(),optionalIndex=null===(_optionalsIterator3=optionalsIterator)||void 0===_optionalsIterator3?void 0:_optionalsIterator3.next().value,checkedIterator=null==checkedIndexes?void 0:checkedIndexes.values(),checkedIndex=null===(_checkedIterator3=checkedIterator)||void 0===_checkedIterator3?void 0:_checkedIterator3.next().value;for(let i=0;i<itemCount;++i){const maxScore=maxScores[i],score=null==scores?void 0:scores[i],average=null==averages?void 0:averages[i],optional=i===optionalIndex;if(optional&&(optionalIndex=optionalsIterator.next().value),void 0!==average&&average>=0&&(accumulatedAverage+=average,optional||(accumulatedMax.average+=maxScore)),void 0!==score&&score>=0)accumulatedScore+=score,accumulatedEstimation+=score,optional?(accumulatedOptionalScore+=score,accumulatedOptionalEstimation+=score):(accumulatedMax.score+=maxScore,accumulatedMax.estimate+=maxScore,remainingMandatoryPoints-=maxScore),remainingPoints-=maxScore;else{const estimation=null==estimations?void 0:estimations[i],estimated=void 0!==estimation&&estimation>=0;if(estimated&&(indexToEstimate[i]=estimation),i===checkedIndex&&(checkedIndex=checkedIterator.next().value,estimated)){const estimatedScore=maxScore/100*estimation;accumulatedEstimation+=estimatedScore,optional?accumulatedOptionalEstimation+=estimatedScore:accumulatedMax.estimate+=maxScore}}}view.average=void 0!==averages&&averages.length>0?format(gradeFromScore(accumulatedAverage,accumulatedMax.average)):"–";const anyScores=void 0!==scores&&scores.length>0,getEffectiveGrade=(accumulatedPoints,accumulatedOptionalPoints,accumulatedMaxPoints)=>{const mandatoryGrade=gradeFromScore(accumulatedPoints-accumulatedOptionalPoints,accumulatedMaxPoints);return mandatoryGrade<5?gradeFromScore(accumulatedPoints,accumulatedMaxPoints):mandatoryGrade};let currentEstimatedGrade;if(view.currentGrade=anyScores?format(getEffectiveGrade(accumulatedScore,accumulatedOptionalScore,accumulatedMax.score)):"–",(null==checkedIndexes?void 0:checkedIndexes.length)>0&&(null==estimations?void 0:estimations.length)>0||anyScores){const effectiveEstimation=getEffectiveGrade(accumulatedEstimation,accumulatedOptionalEstimation,accumulatedMax.estimate);view.selfEstimation=format(currentEstimatedGrade=effectiveEstimation)}else view.selfEstimation="–";let bestPossibleGrade,currentGoalClass="",bestPossibleMandatoryGrade=gradeFromScore(accumulatedScore-accumulatedOptionalScore+remainingMandatoryPoints,totalMandatoryPoints);bestPossibleGrade=bestPossibleMandatoryGrade<5?gradeFromScore(accumulatedScore+remainingPoints,totalMandatoryPoints):bestPossibleMandatoryGrade;const getGoalStatus=goal=>0===goal?{message:strings.empty,class:"alert-warning"}:goal>=bestPossibleGrade?void 0!==currentEstimatedGrade&&goal>=currentEstimatedGrade?{message:strings.likely,class:"alert-success"}:{message:strings.unlikely,class:"alert-warning"}:bestPossibleGrade<5?{message:strings.unachievable,class:"alert-danger"}:{message:strings.fail,class:"alert-danger"};{const status=getGoalStatus(data.Goal??0);view.goalStatus=status.message,view.goalClass=currentGoalClass=status.class}return _templates.default.render("lytix_grademonitor/grademonitor",view).then((html=>{var _document$getElementB;_widget.default.getContentContainer("grademonitor").insertAdjacentHTML("beforeend",html);const widget=document.getElementById("grademonitor"),finalEstimationLabel=widget.querySelector(".final-estimation"),checkboxes=widget.querySelectorAll("td input[type=checkbox]"),itemEstimationLabels=widget.querySelectorAll("td.estimation"),hasChanged={estimations:!1,checked:!1},updated={estimations:{},checked:{}};let logs=[];const log=(0,_logs.makeLoggingFunction)(userid,courseid,contextid,"grademonitor"),complexKeys=["estimations","checked"],simpleKeys=data.LastSchemeUpdate?["goal","showAverage","schemeUpdateSeen"]:["goal","showAverage"],beaconUrl=_config.wwwroot+"/local/lytix/modules/grademonitor/endpoint/grademonitor_update.php",saveData=()=>{if(null===timeoutId)return;const changes={};for(let i=0;i<2;++i){const key=complexKeys[i];hasChanged[key]&&(changes[key]=updated[key],updated[key]={},hasChanged[key]=!1)}for(let i=simpleKeys.length-1;i>=0;--i){const key=simpleKeys[i];void 0!==updated[key]&&(changes[key]=updated[key],updated[key]=void 0)}const logCount=logs.length;for(let i=0;i<logCount;++i){const l=logs[i];log(l[0],l[1],l[2],l[3])}logs=[],navigator.sendBeacon(beaconUrl,JSON.stringify({contextid:contextid,courseid:courseid,changes:changes})),timeoutId=null};let timeoutId=null;const queueUpdate=()=>{clearTimeout(timeoutId),timeoutId=setTimeout(saveData,12e4)},optionalIndexeSet=new Set(optionalIndexes);let accumulatedMaxScore=accumulatedMax.estimate;widget.querySelector("table").addEventListener("input",(event=>{const target=event.target;let row=target;do{row=row.parentElement}while(null==row.dataset.index);const itemIndex=parseInt(row.dataset.index),itemId=itemIDs[itemIndex],maxScore=maxScores[itemIndex],currentEstimation=indexToEstimate[itemIndex]??0,optional=optionalIndexeSet.has(itemIndex),checkbox=checkboxes[itemIndex],isCheckboxEvent="checkbox"==target.type;let checkboxChanged=isCheckboxEvent;if(isCheckboxEvent||checkbox.checked||(checkboxChanged=checkbox.checked=!0),checkboxChanged){hasChanged.checked=!0;const sign=(updated.checked[itemId]=checkbox.checked)?1:-1;optional||(accumulatedMaxScore+=maxScore*sign);accumulatedEstimation+=maxScore/100*currentEstimation*sign,checkbox.checked?row.classList.remove("unchecked"):row.classList.add("unchecked"),logs.push([checkbox.checked?"INCLUDE":"EXCLUDE","ITEM",null,itemId])}if(!isCheckboxEvent){hasChanged.estimations=!0;const newEstimation=indexToEstimate[itemIndex]=updated.estimations[itemId]=parseInt(target.value),scoreDelta=maxScore/100*(newEstimation-currentEstimation);accumulatedEstimation+=scoreDelta,optional?(itemEstimationLabels[itemIndex].innerText=format(maxScore/100*newEstimation)+strings.points,accumulatedOptionalEstimation+=scoreDelta):itemEstimationLabels[itemIndex].innerText=format(gradeFromPercent(newEstimation)),logs.push(["CHANGE","ESTIMATION",newEstimation,itemId])}const previousEstimatedGrade=currentEstimatedGrade;if(accumulatedMaxScore>0){const effectiveEstimation=getEffectiveGrade(accumulatedEstimation,accumulatedOptionalEstimation,accumulatedMaxScore);finalEstimationLabel.innerText=format(effectiveEstimation),currentEstimatedGrade=effectiveEstimation}else finalEstimationLabel.innerText="–",currentEstimatedGrade=void 0;currentGoal&&currentEstimatedGrade!==previousEstimatedGrade&&updateGoalStatus(),queueUpdate()}));const classAverages=widget.querySelectorAll(".class-average"),nameCol=document.querySelector("col.name"),averageCol=data.ShowAverage?document.querySelector("col.average"):document.createElement("col");data.ShowAverage||averageCol.classList.add("average"),document.getElementById("show-average-control").addEventListener("change",(event=>{for(let i=classAverages.length-1;i>=0;--i)classAverages[i].classList.toggle("d-none");(updated.showAverage=data.ShowAverage=!data.ShowAverage)?nameCol.insertAdjacentElement("afterend",averageCol):averageCol.parentElement.removeChild(averageCol),logs.push([event.target.checked?"SHOW":"HIDE","COURSE AVERAGE"]),queueUpdate()}));let currentGoal=data.Goal;const goalElement=document.getElementById("grade-goal"),goalStatus=document.getElementById("goal-status"),updateGoalStatus=function(){let goal=arguments.length>0&&void 0!==arguments[0]?arguments[0]:currentGoal;const status=getGoalStatus(goal);goalStatus.innerText=status.message,goalElement.classList.remove(currentGoalClass),goalElement.classList.add(currentGoalClass=status.class)};goalElement.addEventListener("change",(event=>{updateGoalStatus(currentGoal=updated.goal=parseInt(event.target.value)),logs.push(["CHANGE","GOAL",currentGoal]),queueUpdate()})),null===(_document$getElementB=document.getElementById("dismiss-scheme-update"))||void 0===_document$getElementB||_document$getElementB.addEventListener("click",(event=>{updated.schemeUpdateSeen=!0,queueUpdate(),event.target.parentElement.remove()}),{once:!0}),window.addEventListener("beforeunload",saveData)}))})).finally((()=>{document.getElementById("grademonitor").classList.remove("loading")})).catch((error=>_widget.default.handleError(error,"grademonitor")))}}));

//# sourceMappingURL=grademonitor.min.js.map